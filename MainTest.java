package com.test;

import java.util.ArrayList;
import java.util.List;

public class MainTest {

	public static void main(String[] args) {
		/********************************************************************
		//功能描述：以WHO-BMI曲线为例，
		          输入多条参考线，输入目标年龄，
		          返回目标年龄对应的 每条参考线的预测p值
		//参数2:   ageTarget，要进行估计的年龄，（禁止输入<=0的值）
		//参数1:   predictTruePs，参考标准数据，（禁止输入<=0的值）
		//        三层结构，为[[[结果，目标]，[结果，目标]]，[[结果，目标]，[结果，目标]]]]
		//        WHO身高标准例子的话：[[[p值，年龄]，[p值，年龄]]，[[p值，年龄]，[p值，年龄]]]]
		//        最内层数组，为p值和年龄构成一组键值对，对应坐标空间中的1个点。
		//           因为要构造参考线，所以要求至少输入两个点，
		//           为了确保预测结果准确性，最好输入五个点至八个点，被预测点接近中间位置。
		//	      中间层可理解为，由内层点构成的线，其实就是我们p值的曲线
		//        最外层是一个list，相当于我们p50、p75...多条曲线,曲线数量可为非0的任意条。
		//返回:  数组，返回的数组中的值为ageTarget对应的p值，数组的下标等同于入参时参考线的顺序。
		//提示： 这个东西的主要耗时在初始化，由于全是静态方法，所以可以作为全局对象运行时只初始化一次。
		********************************************************************/
//	    double[][] p15Data = {{69.604,9},{70.898,10},{72.093,11},{73.277,12},{74.416,13},{74.416,13}};
//		double[][] p50Data = {{71.927,9},{73.265,10},{74.506,11},{75.739,12},{76.93,13}};
//		double[][] p75Data = {{74.251,9},{75.633,10},{76.919,11},{78.202,12},{79.445,13},{79.445,13},{79.445,13}};

		double[][] p3Data = {{11.254,0.01},{12.595,1},{13.789,2},{14.386,3},{14.658,4},{14.814,5},{14.885,6},{14.898,7},{14.862,8},{14.795,9},{14.707,10}};
		double[][] p15Data = {{12.16,0.01},{13.629,1},{14.856,2},{15.458,3},{15.724,4},{15.871,5},{15.933,6},{15.934,7},{15.885,8},{15.804,9},{15.701,10}};
		double[][] p50Data = {{13.407,0.01},{14.982,1},{16.264,2},{16.883,3},{17.147,4},{17.289,5},{17.341,6},{17.33,7},{17.266,8},{17.17,9},{17.05,10}};
		double[][] p85Data = {{14.826,0.01},{16.431,1},{17.789,2},{18.437,3},{18.709,4},{18.851,5},{18.9,6},{18.881,7},{18.805,8},{18.695,9},{18.561,10}};
		double[][] p97Data = {{16.13,0.01},{17.685,1},{19.123,2},{19.807,3},{20.093,4},{20.243,5},{20.294,6},{20.273,7},{20.191,8},{20.072,9},{19.928,10}};


		List<double[][]> pList = new ArrayList <double[][]>();
		pList.add(p3Data);
		pList.add(p15Data);
		pList.add(p50Data);
		pList.add(p85Data);
		pList.add(p97Data);



		PValueSimulation simulation = new PValueSimulation();

		long startTime = System.currentTimeMillis();
		List<Double> result = simulation.predictTruePs(pList, 10);
		long endTime = System.currentTimeMillis();
		System.out.println("首次运行时间：" + (endTime - startTime) + "ms");

		startTime = System.currentTimeMillis();
		simulation.predictTruePs(pList, 10);
		endTime = System.currentTimeMillis();
		System.out.println("第二次运行时间：" + (endTime - startTime) + "ms");

    System.out.println(result);
	}
	
}
